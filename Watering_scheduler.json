{
  "name": "Watering scheduler",
  "nodes": [
    {
      "parameters": {
        "operation": "5DayForecast",
        "cityName": "gothenburg,se"
      },
      "type": "n8n-nodes-base.openWeatherMap",
      "typeVersion": 1,
      "position": [
        -2180,
        220
      ],
      "id": "3dd51219-2db4-403b-ae87-b9944283f4cb",
      "name": "Forecast next 5 days",
      "credentials": {
        "openWeatherMapApi": {
          "id": "qZ91I0R779H3dzxI",
          "name": "OpenWeatherMap account"
        }
      }
    },
    {
      "parameters": {
        "cityName": "gothenburg,se"
      },
      "type": "n8n-nodes-base.openWeatherMap",
      "typeVersion": 1,
      "position": [
        -2400,
        220
      ],
      "id": "2f28b612-38bd-42d7-9ccd-01df8bcc11c6",
      "name": "Current Weather",
      "credentials": {
        "openWeatherMapApi": {
          "id": "qZ91I0R779H3dzxI",
          "name": "OpenWeatherMap account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const forecastList = $input.first().json.list || [];\nconst currentWeather = $('Current Weather').first().json;\n\nconst dayMap = {};\n\n// Step 0: Facts from history\nconst archiveArray = $('Update today\\'s weather').first().json.archive\nfor (const entry of archiveArray) {\n  dayMap[entry.date] = {\n    isDry: !entry.wet,\n    immutable: true\n  };\n}\n\n\n// Step 1: Group 3-hour forecasts by date\nfor (const entry of forecastList) {\n  const dateTime = entry.dt_txt;\n  const date = dateTime.split(\" \")[0];\n\n  const weather = entry.weather?.[0];\n  const isRainy = weather && weather.id < 700;\n\n  // If the date is already in the map (e.g., current date), update only if needed\n  if (!dayMap[date]) {\n    dayMap[date] = { \n      isDry: true,\n      immutable: false\n    };\n  }\n\n  if (isRainy) {\n    dayMap[date] = { \n      isDry: false,\n      immutable: false\n    };\n  }\n}\n\n// Step 2: Convert to sorted array\nconst days = Object.entries(dayMap)\n  .map(([date, data]) => ({\n    date,\n    isDry: data.isDry,\n    immutable: data.immutable\n  }))\n  .sort((a, b) => a.date.localeCompare(b.date));\n\nreturn [{ json: { days } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1980,
        220
      ],
      "id": "b6886e70-4e65-4bef-a825-9b524b7a4120",
      "name": "Rainy Days"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "66762ca4849559edaae97f6936c88f011597d1e224b0f21d2766e4bf9fdfc90e@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Pupicci togethericci"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1780,
        220
      ],
      "id": "61d38894-cb16-4686-9bd0-5a0744c9b19f",
      "name": "Get All Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Vd7Vo8KI0148SrnK",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -1560,
        220
      ],
      "id": "f53275ce-6ec2-4216-a1fd-7529b5cb6c45",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "66762ca4849559edaae97f6936c88f011597d1e224b0f21d2766e4bf9fdfc90e@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Pupicci togethericci"
        },
        "start": "={{ $('Needs watering?').item.json.date }}",
        "end": "={{ new Date(new Date($('Needs watering?').item.json.date).setDate(new Date($('Needs watering?').item.json.date).getDate() + 1)).toISOString().split(\"T\")[0] }}",
        "additionalFields": {
          "allday": "yes",
          "sendUpdates": "none",
          "summary": "Water the plants"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1720,
        780
      ],
      "id": "5a8a9df6-9f3d-448d-bac9-cc2fc4f684e4",
      "name": "Create Watering Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Vd7Vo8KI0148SrnK",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2640,
        220
      ],
      "id": "e7cb9334-96e1-4e34-b70f-dfd5c8ed164f",
      "name": "every 3 hours"
    },
    {
      "parameters": {
        "jsCode": "const events = $input.first().json[''] || [];\n\nconst matchingEvents = [];\n\nfor (const event of events) {\n  if (event.summary === \"Water the plants\") {\n    matchingEvents.push({ json: { existingEvent: event } });\n  }\n}\n\nreturn matchingEvents;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        220
      ],
      "id": "61cb0d44-2da0-4803-bcba-1880fa62c8fb",
      "name": "Find existing watering events",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "existingEvents",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2640,
        520
      ],
      "id": "ad5c6631-a39f-48b0-b5dc-e86b3bc490b1",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "destinationKey": "weather_archive",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2180,
        -40
      ],
      "id": "735d494e-1342-4953-93e4-098f57a8809a",
      "name": "Extract from File",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fileSelector": "weather_archive.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2400,
        -40
      ],
      "id": "68faddb1-32fa-4bb9-94ba-6d78dd5851de",
      "name": "Read weather archive",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const weatherId = $('Current Weather').first().json.weather[0].id;\nconst wet = weatherId < 800;\nconst today = $today.toISODate();\n\nlet data = $input.first().json.weather_archive[0].archive;\n// Initialize if missing or not an array\nif (!Array.isArray(data)) {\n  data = [];\n}\n// the full JSON array\n\nconst index = data.findIndex(entry => entry.date === today);\n\n// Only update if missing or it's wet today\nif (index === -1 || wet) {\n  const newEntry = { date: today, wet: wet };\n\n  if (index !== -1) {\n    data[index] = newEntry; // replace\n  } else {\n    data.push(newEntry); // add\n  }\n}\n\nreturn {\n  archive: data\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1960,
        -40
      ],
      "id": "c333a25f-9a05-4f3d-84ab-4a82d36f9ff0",
      "name": "Update today's weather"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "archive",
        "options": {
          "fileName": "weather_archive.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1740,
        -40
      ],
      "id": "6721090b-30a7-4eac-bd7b-0f712755577b",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "weather_archive.json",
        "dataPropertyName": "archive",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1540,
        -40
      ],
      "id": "34d9630a-b1a1-44df-96b4-adefe7b3a290",
      "name": "Save new archive"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var existingEvents = $json.existingEvents || [];\nvar rainyDays = $('Rainy Days').first().json.days;\n\n// Loop over all existing events\nfor (const event of existingEvents) {\n  if (event.existingEvent === undefined) break;\n  const eventDate = event?.existingEvent.start?.date;\n\n  // Loop over all rainy days\n  for (const day of rainyDays) {\n    if (day.date === eventDate) {\n      day.watered = true;\n      break; // stop after finding the match for this event\n    }\n  }\n  \n}\n\n// Set all other days as not watered\nfor (const day of rainyDays) {\n  if (day.watered === undefined) {\n    day.watered = false;\n  }\n}\n\nreturn {\n  json: {\n    days: rainyDays,\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2420,
        520
      ],
      "id": "0b00b2e3-9067-433e-8aac-80a6587df96f",
      "name": "Set existing watering events as \"watered\" day"
    },
    {
      "parameters": {
        "jsCode": "const allDays = $input.first().json.days\nlet dryStreak = 0;\n\nfor (let i = 0; i < allDays.length; i++) {\n  const day = allDays[i];\n\n  // Treat watered as equivalent to not dry\n  const effectiveDry = day.isDry && !day.watered;\n\n  if (effectiveDry) {\n    dryStreak += 1;\n\n    if (dryStreak >= 2 && !day.immutable) {\n      day.needsWatering = true;\n    } else {\n      day.needsWatering = false;\n    }\n\n  } else {\n    dryStreak = 0;\n    day.needsWatering = false;\n  }\n}\n\nreturn {\n  json: {\n    days: allDays\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2200,
        520
      ],
      "id": "88456909-114e-4445-92b5-217fb1ace89d",
      "name": "Set which days need watering"
    },
    {
      "parameters": {
        "fieldToSplitOut": "days",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1980,
        520
      ],
      "id": "f2b99936-85bc-4c5f-8558-8a25f79f1106",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3532904e-77b5-40e4-959e-49e9a2c0a3c6",
              "leftValue": "={{ $json.immutable }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2640,
        800
      ],
      "id": "9d61235b-44b3-4a61-b65e-cb8361da75eb",
      "name": "Immutable?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ee0b50b8-c38a-451a-8ac6-1452d97efc58",
              "leftValue": "={{ $json.needsWatering }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2420,
        880
      ],
      "id": "dc686104-1211-4d38-a309-bafce941ed38",
      "name": "Needs watering?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "974147b3-afa4-4245-95c1-7dae67132c46",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1980,
        780
      ],
      "id": "d560f0c2-836e-4df6-a624-2a50080c223f",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const wateringEvents = $('Aggregate1').first().json.existingEvents\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const watering of wateringEvents) {\n  if (watering.existingEvent === undefined) break; \n  if ($input.first().json.date === watering.existingEvent.start.date) {\n    return [{\n      exists: true\n    }]\n    break\n  }\n}\n\nreturn [{\n  exists: false  \n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2200,
        780
      ],
      "id": "66448975-db52-4eeb-b2b9-ea5ffdab7e14",
      "name": "Should create watering?"
    },
    {
      "parameters": {
        "jsCode": "const wateringEvents = $('Aggregate1').first().json.existingEvents\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const watering of wateringEvents) {\n  if (watering.existingEvent === undefined) break; \n  if ($input.first().json.date === watering.existingEvent.start.date) {\n    return [{\n      exists: true,\n      eventId: watering.existingEvent.id\n    }]\n    break\n  }\n}\n\nreturn [{\n  exists: false  \n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2200,
        1000
      ],
      "id": "419f774f-6a38-45f0-8f22-9b9f657ec917",
      "name": "Should remove watering?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2703f738-7239-45f3-9289-949f7efebebf",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1980,
        1000
      ],
      "id": "16435d19-3004-40ab-9ef8-bd41c0632098",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "66762ca4849559edaae97f6936c88f011597d1e224b0f21d2766e4bf9fdfc90e@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Pupicci togethericci"
        },
        "eventId": "={{ $json.eventId }}",
        "options": {
          "sendUpdates": "none"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1720,
        1000
      ],
      "id": "1bbd5f44-b1f3-4e63-987d-2273ca5c85cc",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Vd7Vo8KI0148SrnK",
          "name": "Google Calendar account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Forecast next 5 days": {
      "main": [
        [
          {
            "node": "Rainy Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Current Weather": {
      "main": [
        [
          {
            "node": "Read weather archive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rainy Days": {
      "main": [
        [
          {
            "node": "Get All Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Events": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Find existing watering events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "every 3 hours": {
      "main": [
        [
          {
            "node": "Current Weather",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Watering Event": {
      "main": [
        []
      ]
    },
    "Find existing watering events": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Set existing watering events as \"watered\" day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Update today's weather",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read weather archive": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update today's weather": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Save new archive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save new archive": {
      "main": [
        [
          {
            "node": "Forecast next 5 days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set existing watering events as \"watered\" day": {
      "main": [
        [
          {
            "node": "Set which days need watering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set which days need watering": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Immutable?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Immutable?": {
      "main": [
        [],
        [
          {
            "node": "Needs watering?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs watering?": {
      "main": [
        [
          {
            "node": "Should create watering?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Should remove watering?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Create Watering Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should create watering?": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should remove watering?": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e72e5d2b-6dd4-4235-b00b-e798006d4f99",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "71afbebe005cd24e589f468ffe2b07b40b64968cc391637a9151ab21065e348b"
  },
  "id": "V2E6tQl5IDGqwZyO",
  "tags": []
}